/*
_____

A DESIGN SYSTEM
_____

Dependencies
  CHROMATIC
  https://github.com/maxluster/chromatic-sass/blob/master/api.md
*/

body{
  background-image: chromatic-gradient(to right, blue, red);
}

$callisto: "⭐";
$theme: "lighter";

$precision: 100; // two digits behind comma

/*
_____

TYPOGRAPHY SETUP
_____
*/

/*
  Font-size is base on the smallest screen length…
  … and deduced afterwards.
*/
$font-size-default: 2vw;
$font-size-default--print: 12pt;

/*
  whatever the context,
  we'd recommend to always have a line-height of 1.2 relative font-size
  1.2 is actually a bit arbitrary but allows a line to breathe,
  between line n descenders and n+1 ascenders.
*/
$line-height: 1.2;
$font-line-height: unquote("#{$line-height}em");

/*
  _____

  METRICS START HERE
  _____
*/

$gutter: ( $line-height * $font-size-default );
$half-gutter: $gutter / 2;
$double-gutter: $gutter * 2;
$large-gutter: $gutter * 4;

/*
_____

COLORS START HERE
_____
*/
$color-white-apex: #f2f2f2;
$color-black-apex: #222;

$color-white-apex: #fff;
$color-black-apex: #000;



/*
  _____

  CRITICAL SCAFFOLDING
  _____
*/

@function set-precision( $value ){
  @return round( $value * $precision ) / $precision;
}

// https://css-tricks.com/snippets/sass/strip-unit-function/
/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

@function check-font-size( $value: 1rem ) {
  @if strip-unit($value) < strip-unit($font-size-min) {
    @return $font-size-min;
  }
  @if strip-unit($value) > strip-unit($font-size-max) {
    @return $font-size-max;
  }
  @return $value;
}

@function get-font-size( $factor: 1, $no-checks: false ) {
  $abs-factor: .4166; // we try to stay as close as possible as having rounded number once printed out
  $candidate: $factor * $abs-factor * $font-scale;
  @if $candidate > 1 {
    $candidate: round( $candidate );
  }
  $candidate: $candidate * 1rem;
  @if $no-checks == true{
    @return $candidate;
  }
  @return check-font-size( $candidate );
}

@function get-regular-font-size() {
  @return get-font-size( 1 );
}

/*
  Font-size is comprised between a minimum and a maximum value
  with the default size being the value passed to :root

  Every derivated font-size (in root em) will be based upon it.
*/
$font-scale: 6/5; // 6:5, minor third
$font-size-max: get-font-size( 2, true );
$font-size-min: get-font-size( .76, true );
$font-size-regular: get-regular-font-size();

%typesetting {
  @extend %line-height;
  font-size: $font-size-default;

  @media print{
    font-size: $font-size-default--print;
  }
}

%line-height {
  line-height: $font-line-height;
}

:root{
  @extend %typesetting;
}

html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

html,
body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  font-family: sans-serif;
}

/*
  Why prefixing everything?

  Have you ever find yourself digging through someone else's codebase
  wondering if .row or .btn come from a vendor or a human colleague?

  Prefixing is a way to namespace things while expressing what's in your project
  come from this design system and what's yours.
*/

.#{$callisto}-h,
.#{$callisto}-p {
  @extend %line-height;
  margin: 0;

  & + .#{$callisto}-h,
  & + .#{$callisto}-p {
    margin-top: $gutter;
  }
}

/*
  I've been asking myself if it'd be worth having styles applied
  directly to html elements…
  As you can guess, the answer is "no".
  I cannot guarantee what your code will look like and whether if this
  particular design system will be performant under your own contraints.
  … Hence a full by-class declaration mechanism.
*/


@for $i from 1 through 6 {
  .#{$callisto}-h#{$i} {
    /*
      in this template,
      h6 is set to the SAME font-size than basic elements
      like <p>, etc.
    */
    $value: set-precision( $font-size-regular + ( $font-size-max * ( 6 - $i ) ) );
    font-size: $value;

    &.#{$callisto}-as-default {
      $color-luminosity-range: 60;
      $value: ( $color-luminosity-range / $i + (100 - $color-luminosity-range) );
      color: mix( $color-black-apex, $color-white-apex, $value );
      @if $i < 3 {
        font-weight: 900;
      }
    }
  }
}

.#{$callisto}-p {
  font-size: get-regular-font-size();
  // https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant
  // https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-alternates
  // font-feature-settings: 'kern', 'onum', 'liga';
  font-variant: normal; // TODO
}

.#{$callisto}-small{
  font-size: $font-size-min;
}

/*

*/

[data-#{$callisto}-theme="#{$theme}"]{
  color: white;
  background-color: #ccc;
}

.#{$callisto}-header{
  background-color: tomato;

}

@mixin inclusive-groups( $gutter-value: 0 ){
  padding: $gutter-value;
}

.#{$callisto}-group{

  &-s{
    @include inclusive-groups( $half-gutter );
  }

  &-xs{
    @include inclusive-groups( $gutter );
  }

  &,
  &-m{
    @include inclusive-groups( $double-gutter );
  }

  &-l{
    @include inclusive-groups( $large-gutter );
  }
}

/*
_____

COLORS
_____
*/

$color--default: #F710DF;
$color-list--context: chromatic-scale(black, white, (stops: 7)) !default;

@function get-color( $which-color: 'main' ){
  @if $palette and map-has-key( $palette, $which-color ) {
    @return map-get( $palette, $which-color );
  }
  @return $color--default;
}

/*
$commons: (
'info': #6BD4F1
, 'success': #86DEB7
, 'warning': #FF9900
, 'error': #FF715B
, 'destructive': #BA7BA1
, 'darkest': #111
, 'brightest': #fff
);

$palette: map-merge( $commons, $pal ) !global;
*/
@mixin set-palette( $hue-start: #111, $hue-stop: #f9f9f9, $options: () ){
  $palette--context: chromatic-scale($hue-start, $hue-stop, $options) !global;
}

$palette--element:() !global;


/*
_____

CUSTOMIZATION STARTS HERE
_____
*/

@include set-palette();
