/*
_____

A DESIGN SYSTEM
_____
*/

$callisto: "⭐";
$theme: "lighter";

$precision: 100; // two digits behind comma

/*
_____

TYPOGRAPHY SETUP
_____
*/

/*
  Font-size is base on the smallest screen length…
  … and deduced afterwards.
*/
$font-size-default: 5vh;
$font-size-default--print: 12pt;

/*
  whatever the context,
  we'd recommend to always have a line-height of 1.2 relative font-size
  1.2 is actually a bit arbitrary but allows a line to breathe,
  between line n descenders and n+1 ascenders.
*/
$line-height: 1.2;
$font-line-height: unquote("#{$line-height}em");

/*
  _____

  METRICS START HERE
  _____
*/

$gutter: ( $line-height * $font-size-default );

/*
_____

COLORS START HERE
_____
*/
$color-white-apex: #f2f2f2;
$color-black-apex: #222;

$color-white-apex: #fff;
$color-black-apex: #000;



/*
  _____

  CRITICAL SCAFFOLDING
  _____
*/

@function set-precision( $value ){
  @return round( $value * $precision ) / $precision;
}

// https://css-tricks.com/snippets/sass/strip-unit-function/
/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

@function check-font-size( $value: 1rem ) {
  @if strip-unit($value) < strip-unit($font-size-min) {
    @return $font-size-min;
  }
  @if strip-unit($value) > strip-unit($font-size-max) {
    @return $font-size-max;
  }
  @return $value;
}

@function get-font-size( $factor: 1, $no-checks: false ) {
  $abs-factor: .4166; // we try to stay as close as possible as having rounded number once printed out
  $candidate: $factor * $abs-factor * $font-scale;
  @if $candidate > 1 {
    $candidate: round( $candidate );
  }
  $candidate: $candidate * 1rem;
  @if $no-checks == true{
    @return $candidate;
  }
  @return check-font-size( $candidate );
}

@function get-regular-font-size() {
  @return get-font-size( 1 );
}

/*
  Font-size is comprised between a minimum and a maximum value
  with the default size being the value passed to :root

  Every derivated font-size (in root em) will be based upon it.
*/
$font-scale: 6/5; // 6:5, minor third
$font-size-max: get-font-size( 2, true );
$font-size-min: get-font-size( .5, true );
$font-size-regular: get-regular-font-size();

%typesetting {
  @extend %line-height;
  font-size: $font-size-default;

  @media print{
    font-size: $font-size-default--print;
  }
}

%line-height {
  line-height: $font-line-height;
}

:root{
  @extend %typesetting;
}

html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

html,
body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  font-family: sans-serif;
}

h1,
h2,
h3,
h4,
h5,
h6,
p {
  @extend %line-height;
  margin: 0;
}


@for $i from 1 through 6 {
  h#{$i},
  .h#{$i} {
    /*
      in this template,
      h6 is set to the SAME font-size than basic elements
      like <p>, etc.
    */
    $ratio: 6 * ( 7 - $i );
    $value: set-precision( $font-size-regular + ( $font-size-max * ( 6 - $i ) ) );
    @debug "h#{$i} - #{$value}";
    /*@if( $value < $font-size-min ) {
      $value: $font-size-min;
    }*/
    font-size: $value;

    &.as-default {
      $color-luminosity-range: 60;
      $value: ( $color-luminosity-range / $ratio + (100 - $color-luminosity-range) );
      color: mix( $color-black-apex, $color-white-apex, $value );
    }
  }
}

p,
.p {
  font-size: get-regular-font-size();

  & + & {
    margin-top: $gutter;
  }
}

@debug $font-size-regular;

small,
.small{
  font-size: $font-size-min;
}


/*

*/

.#{$callisto}{
  &-group{
    padding: $gutter;
  }
}

[data-#{$callisto}-theme="#{$theme}"]{
  color: white;
  background-color: #ccc;
}
