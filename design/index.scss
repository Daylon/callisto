/*
_____

A DESIGN SYSTEM
_____
*/

$callisto: "⭐";
$theme: "lighter";

/*
_____

TYPOGRAPHY SETUP
_____
*/

/*
  Font-size is base on the smallest screen length…
  … and deduced afterwards.

  In a ideal world, we'd go full steam ahead with viewport units
  but since it's has been buggy with specs implementation being
  all over the place, we'll stick with pixels for a while.

  Anyway. If we did chose viewport unit, to guarantee the most reliable appereance, we'd choosen horizontal viewport unit (vw).
*/
$font-size-default: 11px;
$font-size-default--print: 12pt;
/*
  Font-size is comprised between a minimum and a maximum value
  with the default size being the value passed to :root

  Every derivated font-size (in root em) will be based upon it.
*/
$font-size-max: 30rem;
$font-size-min: 1rem;
$font-scale: 5/6;

/*
  whatever the context,
  we'd recommend to always have a line-height of 1.2 relative font-size
  1.2 is actually a bit arbitrary but allows a line to breathe,
  between line n descenders and n+1 ascenders.
*/
$line-height: 1.2;
$font-line-height: unquote("#{$line-height}em");

/*
  _____

  METRICS START HERE
  _____
*/

$gutter: ( $line-height * $font-size-default );

/*
  _____

  CRITICAL SCAFFOLDING
  _____
*/

// https://css-tricks.com/snippets/sass/strip-unit-function/
/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function check-font-size( $value: 1rem ) {
  @if $value < $font-size-min {
    @return $font-size-min;
  }
  @if $value > $font-size-max {
    @return $font-size-max;
  }
  @return $value;
}

@function get-font-size( $factor: 1 ) {
  $candidate: ( $factor * $font-scale ) * strip-unit( $font-size-default );

  @debug ($factor * $font-scale);
  @if $candidate > 1 {
    $candidate: round( $candidate );
  }
  // $candidate: unquote( "#{$candidate}rem" );
  @debug $candidate;
  @return check-font-size( $candidate );
}

%typesetting {
  @extend %line-height;
  font-size: $font-size-default;

  @media print{
    font-size: $font-size-default--print;
  }
}

%line-height {
  line-height: $font-line-height;
}

:root{
  @extend %typesetting;
}

html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

html,
body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  font-family: sans-serif;
}

h1,
h2,
h3,
h4,
h5,
h6,
p {
  @extend %line-height;
  margin: 0;
}

p,
.p {
  font-size: get-font-size();

  & + & {
    margin-top: $gutter;
  }
}

@for $i from 1 through 6 {
  .h#{$i} {
    $value: round( $font-size-max / $i );
    @if( $value < $font-size-min ) {
      $value: $font-size-min;
    }
    font-size: $value;
  }
}

.#{$callisto}{
  &-group{
    padding: $gutter;
  }
}

[data-#{$callisto}-theme="#{$theme}"]{
  color: white;
  background-color: #ccc;
}

/*

*/
